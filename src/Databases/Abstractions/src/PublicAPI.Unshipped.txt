const LangChain.Databases.VectorCollection.DefaultName = "langchain" -> string!
LangChain.Databases.DistanceStrategy
LangChain.Databases.DistanceStrategy.Cosine = 1 -> LangChain.Databases.DistanceStrategy
LangChain.Databases.DistanceStrategy.Euclidean = 0 -> LangChain.Databases.DistanceStrategy
LangChain.Databases.DistanceStrategy.InnerProduct = 2 -> LangChain.Databases.DistanceStrategy
LangChain.Databases.IVectorCollection
LangChain.Databases.IVectorCollection.AddAsync(System.Collections.Generic.IReadOnlyCollection<LangChain.Databases.Vector!>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<string!>!>!
LangChain.Databases.IVectorCollection.DeleteAsync(System.Collections.Generic.IEnumerable<string!>! ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LangChain.Databases.IVectorCollection.GetAsync(string! id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LangChain.Databases.Vector?>!
LangChain.Databases.IVectorCollection.Id.get -> string!
LangChain.Databases.IVectorCollection.IsEmptyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LangChain.Databases.IVectorCollection.Name.get -> string!
LangChain.Databases.IVectorCollection.SearchAsync(LangChain.Databases.VectorSearchRequest! request, LangChain.Databases.VectorSearchSettings? settings = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LangChain.Databases.VectorSearchResponse!>!
LangChain.Databases.IVectorDatabase
LangChain.Databases.IVectorDatabase.CreateCollectionAsync(string! collectionName, int dimensions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LangChain.Databases.IVectorDatabase.DeleteCollectionAsync(string! collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LangChain.Databases.IVectorDatabase.GetCollectionAsync(string! collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LangChain.Databases.IVectorCollection!>!
LangChain.Databases.IVectorDatabase.GetOrCreateCollectionAsync(string! collectionName, int dimensions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LangChain.Databases.IVectorCollection!>!
LangChain.Databases.IVectorDatabase.IsCollectionExistsAsync(string! collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
LangChain.Databases.IVectorDatabase.ListCollectionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<string!>!>!
LangChain.Databases.RelevanceScoreFunctions
LangChain.Databases.Vector
LangChain.Databases.Vector.Distance.get -> float
LangChain.Databases.Vector.Distance.set -> void
LangChain.Databases.Vector.Embedding.get -> float[]?
LangChain.Databases.Vector.Embedding.set -> void
LangChain.Databases.Vector.Id.get -> string!
LangChain.Databases.Vector.Id.set -> void
LangChain.Databases.Vector.Metadata.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>?
LangChain.Databases.Vector.Metadata.set -> void
LangChain.Databases.Vector.RelevanceScore.get -> float
LangChain.Databases.Vector.RelevanceScore.set -> void
LangChain.Databases.Vector.Text.get -> string!
LangChain.Databases.Vector.Text.set -> void
LangChain.Databases.Vector.Vector() -> void
LangChain.Databases.VectorCollection
LangChain.Databases.VectorCollection.Id.get -> string!
LangChain.Databases.VectorCollection.Id.set -> void
LangChain.Databases.VectorCollection.Name.get -> string!
LangChain.Databases.VectorCollection.Name.set -> void
LangChain.Databases.VectorCollection.VectorCollection(string! name = "langchain", string? id = null) -> void
LangChain.Databases.VectorSearchRequest
LangChain.Databases.VectorSearchRequest.Embeddings.get -> float[]![]!
LangChain.Databases.VectorSearchRequest.Embeddings.set -> void
LangChain.Databases.VectorSearchRequest.VectorSearchRequest() -> void
LangChain.Databases.VectorSearchResponse
LangChain.Databases.VectorSearchResponse.Items.get -> System.Collections.Generic.IReadOnlyList<LangChain.Databases.Vector!>!
LangChain.Databases.VectorSearchResponse.Items.set -> void
LangChain.Databases.VectorSearchResponse.VectorSearchResponse() -> void
LangChain.Databases.VectorSearchSettings
LangChain.Databases.VectorSearchSettings.DistanceStrategy.get -> LangChain.Databases.DistanceStrategy
LangChain.Databases.VectorSearchSettings.DistanceStrategy.set -> void
LangChain.Databases.VectorSearchSettings.FetchK.get -> int
LangChain.Databases.VectorSearchSettings.FetchK.set -> void
LangChain.Databases.VectorSearchSettings.LambdaMult.get -> float
LangChain.Databases.VectorSearchSettings.LambdaMult.set -> void
LangChain.Databases.VectorSearchSettings.NumberOfResults.get -> int
LangChain.Databases.VectorSearchSettings.NumberOfResults.set -> void
LangChain.Databases.VectorSearchSettings.RelevanceScoreFunc.get -> System.Func<float, float>?
LangChain.Databases.VectorSearchSettings.RelevanceScoreFunc.set -> void
LangChain.Databases.VectorSearchSettings.ScoreThreshold.get -> float?
LangChain.Databases.VectorSearchSettings.ScoreThreshold.set -> void
LangChain.Databases.VectorSearchSettings.Type.get -> LangChain.Databases.VectorSearchType
LangChain.Databases.VectorSearchSettings.Type.set -> void
LangChain.Databases.VectorSearchSettings.VectorSearchSettings() -> void
LangChain.Databases.VectorSearchType
LangChain.Databases.VectorSearchType.MaximumMarginalRelevance = 2 -> LangChain.Databases.VectorSearchType
LangChain.Databases.VectorSearchType.Similarity = 0 -> LangChain.Databases.VectorSearchType
LangChain.Databases.VectorSearchType.SimilarityScoreThreshold = 1 -> LangChain.Databases.VectorSearchType
static LangChain.Databases.RelevanceScoreFunctions.Cosine(float distance) -> float
static LangChain.Databases.RelevanceScoreFunctions.Euclidean(float distance) -> float
static LangChain.Databases.RelevanceScoreFunctions.Get(LangChain.Databases.DistanceStrategy distanceStrategy) -> System.Func<float, float>!
static LangChain.Databases.RelevanceScoreFunctions.MaxInnerProduct(float distance) -> float
static LangChain.Databases.VectorSearchRequest.implicit operator LangChain.Databases.VectorSearchRequest!(float[]! embedding) -> LangChain.Databases.VectorSearchRequest!
static LangChain.Databases.VectorSearchRequest.implicit operator LangChain.Databases.VectorSearchRequest!(float[]![]! embeddings) -> LangChain.Databases.VectorSearchRequest!
static LangChain.Databases.VectorSearchRequest.ToVectorSearchRequest(float[]! embedding) -> LangChain.Databases.VectorSearchRequest!
static LangChain.Databases.VectorSearchRequest.ToVectorSearchRequest(float[]![]! embeddings) -> LangChain.Databases.VectorSearchRequest!